// ==UserScript==
// @name         Center and brand ChatGPT Prompt Box
// @namespace    https://github.com/BillRaymond/center-chatgpt-prompt-box
// @version      0.12
// @description  Center and brand ChatGPT Prompt Box
// @author       BillRaymond
// @match        *://chatgpt.com/*
// @grant        none
// ==/UserScript==

// Advanced summary:
// Moves the prompt box to the center of the page
// Increases the width of the prompt box
// Adds a background to make the prompt box stand out
// Adds some branding text under the prompt box
// When the prompt box loses focus, it resets to the ChatGPT UI

(function() {
    'use strict';

    const originalStyles = new Map();

    function moveToCenter(target) {
        // Store the original styles
        originalStyles.set(target, {
            position: target.style.position,
            top: target.style.top,
            left: target.style.left,
            transform: target.style.transform,
            width: target.style.width,
            height: target.style.height,
        });

        // Get the original dimensions
        const originalWidth = target.offsetWidth;
        const originalHeight = target.offsetHeight;

        // Calculate the new dimensions
        const newWidth = originalWidth * 1.5;

        // Apply the styles to center and enlarge the container
        target.style.position = 'fixed';
        target.style.top = '50%';
        target.style.left = '50%';
        target.style.transform = 'translate(-50%, -50%)';
        target.style.width = `${newWidth}px`;
    }

    function applyBorder(target) {
        // Store the original styles
        originalStyles.set(target, {
            boxShadow: target.style.boxShadow,
            borderRadius: target.style.borderRadius,
            backgroundColor: target.style.backgroundColor
        });

        // Add a gradient border and fill inspired by the image
        target.style.boxShadow = '0 0 8px 8px rgba(255, 255, 255, 0)'; // Transparent box-shadow to avoid affecting the border gradient
        target.style.border = '8px solid';
        target.style.borderImage = 'linear-gradient(to right, #00c9ff, #92fe9d, #f9f47d, #f45dba, #405de6) 1'; // Gradient border inspired by the uploaded image
        target.style.backgroundImage = 'linear-gradient(to right, #00c9ff, #92fe9d, #f9f47d, #f45dba, #405de6)'; // Matching background gradient
        target.style.display = 'flex' // used to ensure we set the style to flex so we can extend the container
        target.style.flexDirection = 'column' // used to place new containers underneath this container
        target.style.marginBottom = '0px';
        target.style.paddingBottom = '0px';
        target.style.gap = '0'
    }
    function addBrandingBox(target) {
        // Create a new branding container
        const brandingTarget = document.createElement('div');
        brandingTarget.id = 'btai-branding-box'; // target this to remove
        // add branding text and styles
        brandingTarget.textContent = "Bill Talks AI (https://billtalksai.com)";
        brandingTarget.style.color = 'rgba(255, 255, 255, 1)'; // text color
        brandingTarget.style.textShadow = '2px 2px 4px rgba(0, 0, 0, 0.4)'; // text shadow
        brandingTarget.style.fontWeight = '700';
        // set container size and alignment
        target.appendChild(brandingTarget);
        brandingTarget.style.display = 'flex';
        brandingTarget.style.justifyContent = 'flex-end'
        brandingTarget.style.width = target.style.width;
        brandingTarget.style.margin = '4px 26px 0px 0px'; //top right bottom left
        brandingTarget.style.padding = '0px'; //top right bottom left
    }

    function resetPosition(target) {
        if (originalStyles.has(target)) {
            const original = originalStyles.get(target);
            target.style.position = original.position;
            target.style.top = original.top;
            target.style.left = original.left;
            target.style.transform = original.transform;
            target.style.width = original.width;
            target.style.height = original.height;
            originalStyles.delete(target);
        }
    }

    function resetBorder(target) {
        if (originalStyles.has(target)) {
            const original = originalStyles.get(target);
            target.style.boxShadow = original.boxShadow;
            target.style.borderRadius = original.borderRadius;
            target.style.border = ''; // Remove the custom border
            target.style.backgroundImage = ''; // Remove the gradient background
            // Remove the branding box
            const brandingTarget = target.querySelector('#btai-branding-box'); // Select the red box by its ID
            if (brandingTarget) {
                brandingTarget.remove(); // Remove the branding box from the DOM
            }
            originalStyles.delete(target);
        }
    }

    function handleFocus(event) {
        const target = event.target;
        const container = target.closest('form.w-full').parentElement.parentElement; // Targeting the container (two levels up)
        const borderTarget = target.closest('form.w-full').parentElement; // Targeting the element one level down

        if (container) {
            moveToCenter(container);
        }
        if (borderTarget) {
            applyBorder(borderTarget);
            addBrandingBox(borderTarget)
        }
    }

    function handleBlur(event) {
        const target = event.target;
        const container = target.closest('form.w-full').parentElement.parentElement;
        const borderTarget = target.closest('form.w-full').parentElement;

        if (container) {
            resetPosition(container);
        }
        if (borderTarget) {
            resetBorder(borderTarget);
        }
    }

    // Add event listeners to the input box
    document.addEventListener('focusin', (event) => {
        const target = event.target;

        if (target.tagName === 'TEXTAREA' || target.tagName === 'INPUT') {
            handleFocus(event);
        }
    });

    document.addEventListener('focusout', (event) => {
        const target = event.target;

        if (target.tagName === 'TEXTAREA' || target.tagName === 'INPUT') {
            handleBlur(event);
        }
    });

})();
